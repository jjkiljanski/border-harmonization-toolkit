============================= test session starts =============================
platform win32 -- Python 3.11.5, pytest-8.3.5, pluggy-1.5.0
rootdir: E:\Studia\Studia magisterskie\Masterarbeit - Wirtschaftwissenschaft\dane\Digitalizacja\border_harmonization_toolkit
plugins: anyio-4.2.0, mock-3.14.0
collected 82 items

tests\display\test_change_display.py TESTING FIXTURE district_change_adm_state_matter_fixture
States in the district registry for the date 1930-04-30 12:00:00: [(DistState(current_name='district_a', current_seat_name='seat_a', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))>), 'district_a'), (DistState(current_name='district_b', current_seat_name='seat_b', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))>), 'district_b'), (DistState(current_name='district_c', current_seat_name='seat_c', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 1, 1 1, 1 2, 0 2, 0 1))>), 'district_c'), (DistState(current_name='district_d', current_seat_name='seat_d', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))>), 'district_d'), (DistState(current_name='district_e', current_seat_name='seat_e', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))>), 'district_e'), (DistState(current_name='district_f', current_seat_name='seat_f', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 1, 3 1, 3 2, 2 2, 2 1))>), 'district_f')]
F
tests\display\test_initial_display.py States in the district registry for the date 1931-01-01 00:00:00: [(DistState(current_name='district_a', current_seat_name='seat_a', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))>), 'district_a'), (DistState(current_name='district_b', current_seat_name='seat_b', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))>), 'district_b'), (DistState(current_name='district_c', current_seat_name='seat_c', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 1, 1 1, 1 2, 0 2, 0 1))>), 'district_c'), (DistState(current_name='district_d', current_seat_name='seat_d', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))>), 'district_d'), (DistState(current_name='district_e', current_seat_name='seat_e', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))>), 'district_e'), (DistState(current_name='district_f', current_seat_name='seat_f', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 1, 3 1, 3 2, 2 2, 2 1))>), 'district_f')]
FStates in the district registry for the date 1931-01-01 00:00:00: [(DistState(current_name='district_a', current_seat_name='seat_a', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))>), 'district_a'), (DistState(current_name='district_b', current_seat_name='seat_b', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))>), 'district_b'), (DistState(current_name='district_c', current_seat_name='seat_c', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((0 1, 1 1, 1 2, 0 2, 0 1))>), 'district_c'), (DistState(current_name='district_d', current_seat_name='seat_d', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))>), 'district_d'), (DistState(current_name='district_e', current_seat_name='seat_e', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))>), 'district_e'), (DistState(current_name='district_f', current_seat_name='seat_f', timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)), current_dist_type='w', current_territory=<POLYGON ((2 1, 3 1, 3 2, 2 2, 2 1))>), 'district_f')]
F
tests\integration\test_change_apply.py ........Newly created state of unit district_b: current_name='district_b' current_seat_name='seat_b' timespan=TimeSpan(start=datetime.datetime(1923, 1, 2, 0, 0), end=datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 12, 9, 12, 0)) current_dist_type='w' current_territory=<POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))>
...
tests\unit\test_adm_change.py ....................................
tests\unit\test_adm_state.py ..........
tests\unit\test_adm_timespan.py ....
tests\unit\test_adm_unit.py ..................

================================== FAILURES ===================================
____________________ test_change_plot_from_matter_fixtures ____________________

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3802: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
index.pyx:153: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:182: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas\\_libs\\hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   KeyError: 'name_column'

pandas\\_libs\\hashtable_class_helper.pxi:7089: KeyError

The above exception was the direct cause of the following exception:

request = <FixtureRequest for <Function test_change_plot_from_matter_fixtures>>
change_test_setup = {'administrative_state': AdministrativeState(timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetim...datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)))], changes=[], is_homeland=False)])}

    def test_change_plot_from_matter_fixtures(request, change_test_setup):
    
        # Define the output HTML path
        output_html_path = "./tests/display/change_plot_test.html"
    
        # 1. Ensure the HTML file is empty before starting
        if os.path.exists(output_html_path):
            os.remove(output_html_path)  # Remove the file if it exists to create a fresh one
    
        # Create a fresh, empty HTML file
        with open(output_html_path, "w", encoding="utf-8") as f:
            f.write("<html><head><title>Test Change Plots</title></head><body></body></html>")
    
        # # 2. Add the plots for every fixture
        for fixture_name in ["district_change_adm_state_matter_fixture", "region_reform_matter_fixture", "district_reform_matter_fixture",
                             "one_to_many_matter_fixture", "create_many_to_one_matter_fixture",
                             "reuse_many_to_one_matter_fixture", "region_change_adm_state_matter_fixture"]:
    
            print(f"TESTING FIXTURE {fixture_name}")
            # Deepcopy to reset state for each fixture
            region_registry = copy.deepcopy(change_test_setup["region_registry"])
            dist_registry = copy.deepcopy(change_test_setup["district_registry"])
            administrative_state = copy.deepcopy(change_test_setup["administrative_state"])
    
            matter = request.getfixturevalue(fixture_name)
            change = Change(
                date=datetime(1930, 5, 1),
                source="Legal Act XYZ",
                description="Test change",
                order=1,
                matter=matter
            )
    
>           change_plot = change.apply(administrative_state, region_registry, dist_registry, plot_change = True)

tests\display\test_change_display.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
data_models\adm_change.py:511: in apply
    plot_before = self._plot(adm_state, region_registry, dist_registry, before_or_after="before")
data_models\adm_change.py:581: in _plot
    fig = build_plot_from_layers(country_layer, change_region_layer, change_district_layer, district_layer, region_layer)
helper_functions.py:77: in build_plot_from_layers
    ax.text(x, y, str(row["name_column"]), ha='center', va='center', fontsize=8)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1111: in __getitem__
    return self._get_value(key)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1227: in _get_value
    loc = self.index.get_loc(label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'name_column'

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3809: KeyError
_________________________ test_district_registry_plot _________________________

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3802: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
index.pyx:153: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:182: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas\\_libs\\hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   KeyError: 'name_column'

pandas\\_libs\\hashtable_class_helper.pxi:7089: KeyError

The above exception was the direct cause of the following exception:

change_test_setup = {'administrative_state': AdministrativeState(timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetim...datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)))], changes=[], is_homeland=False)])}

    def test_district_registry_plot(change_test_setup):
        # Extract the district_registry instance from the fixture
        district_registry = change_test_setup["district_registry"]
    
        # Define a path for the HTML output (temporary file for the test)
        output_html_path = "./tests/display/initial_state_plot_test.html"
    
        test_date = datetime(1931,1,1)
    
        # Invoke the plot method
>       district_plot = district_registry.plot(output_html_path, test_date)

tests\display\test_initial_display.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
data_models\adm_unit.py:229: in plot
    fig = build_plot_from_layers(layer)
helper_functions.py:77: in build_plot_from_layers
    ax.text(x, y, str(row["name_column"]), ha='center', va='center', fontsize=8)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1111: in __getitem__
    return self._get_value(key)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1227: in _get_value
    loc = self.index.get_loc(label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'name_column'

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3809: KeyError
___________________ test_administrative_state_plot_appends ____________________

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
>           return self._engine.get_loc(casted_key)

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3802: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
index.pyx:153: in pandas._libs.index.IndexEngine.get_loc
    ???
index.pyx:182: in pandas._libs.index.IndexEngine.get_loc
    ???
pandas\\_libs\\hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   KeyError: 'name_column'

pandas\\_libs\\hashtable_class_helper.pxi:7089: KeyError

The above exception was the direct cause of the following exception:

change_test_setup = {'administrative_state': AdministrativeState(timespan=TimeSpan(start=datetime.datetime(1921, 2, 19, 0, 0), end=datetim...datetime.datetime(1938, 11, 16, 0, 0), middle=datetime.datetime(1930, 1, 3, 0, 0)))], changes=[], is_homeland=False)])}

    def test_administrative_state_plot_appends(change_test_setup):
    
        region_registry = change_test_setup["region_registry"]
        district_registry = change_test_setup["district_registry"]
        administrative_state = change_test_setup["administrative_state"]
        output_html_path = "./tests/display/initial_state_plot_test.html"
    
        assert os.path.exists(output_html_path), "Expected base HTML file to exist before appending."
    
        # Count images before
        with open(output_html_path, "r", encoding="utf-8") as f:
            html_content_before = f.read()
        initial_img_count = html_content_before.count("<img src=")
    
        test_date = datetime(1931,1,1)
    
>       adm_state_plot = administrative_state.plot(region_registry, district_registry, test_date)

tests\display\test_initial_display.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
data_models\adm_state.py:267: in plot
    fig = build_plot_from_layers(country_layer, district_layer, region_layer)
helper_functions.py:77: in build_plot_from_layers
    ax.text(x, y, str(row["name_column"]), ha='center', va='center', fontsize=8)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1111: in __getitem__
    return self._get_value(key)
C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\series.py:1227: in _get_value
    loc = self.index.get_loc(label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Index(['name_id', 'geometry', 'color', 'edgecolor', 'linewidth', 'shownames'], dtype='object')
key = 'name_column'

    def get_loc(self, key):
        """
        Get integer location, slice or boolean mask for requested label.
    
        Parameters
        ----------
        key : label
    
        Returns
        -------
        int if unique index, slice if monotonic index, else mask
    
        Examples
        --------
        >>> unique_index = pd.Index(list('abc'))
        >>> unique_index.get_loc('b')
        1
    
        >>> monotonic_index = pd.Index(list('abbc'))
        >>> monotonic_index.get_loc('b')
        slice(1, 3, None)
    
        >>> non_monotonic_index = pd.Index(list('abcb'))
        >>> non_monotonic_index.get_loc('b')
        array([False,  True, False,  True])
        """
        casted_key = self._maybe_cast_indexer(key)
        try:
            return self._engine.get_loc(casted_key)
        except KeyError as err:
            if isinstance(casted_key, slice) or (
                isinstance(casted_key, abc.Iterable)
                and any(isinstance(x, slice) for x in casted_key)
            ):
                raise InvalidIndexError(key)
>           raise KeyError(key) from err
E           KeyError: 'name_column'

C:\Users\janek\miniconda3\Lib\site-packages\pandas\core\indexes\base.py:3809: KeyError
=========================== short test summary info ===========================
FAILED tests/display/test_change_display.py::test_change_plot_from_matter_fixtures
FAILED tests/display/test_initial_display.py::test_district_registry_plot - K...
FAILED tests/display/test_initial_display.py::test_administrative_state_plot_appends
======================== 3 failed, 79 passed in 2.24s =========================
